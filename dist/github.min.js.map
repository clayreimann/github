{"version":3,"sources":["github.min.js"],"names":["global","factory","define","amd","exports","module","require","mod","utf8","axios","base64","Promise","github","this","Utf8","Base64","b64encode","string","encode","Github","options","API_URL","apiUrl","_request","method","path","data","cb","raw","getURL","url","indexOf","test","_typeof","param","hasOwnProperty","encodeURIComponent","replace","window","Date","getTime","config","headers","Accept","Content-Type","token","username","password","Authorization","then","response","status","request","error","_requestAllPages","singlePage","results","iterate","err","res","xhr","Array","push","apply","next","link","split","filter","map","exec","pop","User","repos","params","type","sort","per_page","page","join","orgs","gists","notifications","all","participating","since","constructor","toISOString","before","length","show","command","userRepos","userStarred","userGists","orgRepos","orgname","follow","unfollow","createRepo","Repository","updateTree","branch","currentTree","sha","that","getRef","repoPath","repo","name","user","fullname","ref","object","createRef","deleteRef","deleteRepo","listTags","listPulls","state","head","base","direction","getPull","number","compare","listBranches","heads","getBlob","getCommit","getSha","pathContent","getStatuses","getTree","tree","postBlob","content","encoding","Buffer","toString","Blob","Error","baseTree","blob","base_tree","mode","postTree","commit","parent","message","userData","author","email","parents","updateHead","contributors","retry","setTimeout","contents","encodeURI","fork","listForks","oldBranch","newBranch","arguments","createPullRequest","listHooks","getHook","id","createHook","editHook","deleteHook","read","remove","move","newPath","latestCommit","forEach","rootTree","write","writeOptions","committer","undefined","getCommits","until","perpage","isStarred","owner","repository","star","unstar","createRelease","editRelease","getRelease","deleteRelease","Gist","gistPath","create","update","Issue","list","query","Object","keys","option","comment","issue","comments_url","body","edit","get","Search","repositories","code","issues","users","RateLimit","getRateLimit","Symbol","iterator","obj","polyfill","getIssues","getRepo","getUser","getGist","getSearch"],"mappings":"CAAA,SAAWA,EAAQC,GAChB,GAAsB,kBAAXC,SAAyBA,OAAOC,IACxCD,QAAQ,SAAU,OAAQ,QAAS,UAAW,eAAgBD,OAC1D,IAAuB,mBAAZG,SACfH,EAAQI,OAAQC,QAAQ,QAASA,QAAQ,SAAUA,QAAQ,WAAYA,QAAQ,oBAC3E,CACJ,GAAIC,IACDH,WAEHH,GAAQM,EAAKP,EAAOQ,KAAMR,EAAOS,MAAOT,EAAOU,OAAQV,EAAOW,SAC9DX,EAAOY,OAASL,EAAIH,UAEvBS,KAAM,SAAUR,EAAQS,EAAML,EAAOM,EAAQJ,GAY7C,YAQA,SAASK,GAAUC,GAChB,MAAOF,GAAOG,OAAOJ,EAAKI,OAAOD,IAUpC,QAASE,GAAOC,GACbA,EAAUA,KAEV,IAAIC,GAAUD,EAAQE,QAAU,yBAO5BC,EAAWJ,EAAOI,SAAW,SAAkBC,EAAQC,EAAMC,EAAMC,EAAIC,GACxE,QAASC,KACN,GAAIC,GAAML,EAAKM,QAAQ,OAAS,EAAIN,EAAOJ,EAAUI,CAIrD,IAFAK,GAAO,KAAKE,KAAKF,GAAO,IAAM,IAE1BJ,GAAwE,YAA/C,mBAATA,GAAuB,YAAcO,EAAQP,MAAwB,MAAO,OAAQ,UAAUK,QAAQP,GAAU,GACjI,IAAK,GAAIU,KAASR,GACXA,EAAKS,eAAeD,KACrBJ,GAAO,IAAMM,mBAAmBF,GAAS,IAAME,mBAAmBV,EAAKQ,IAKhF,OAAOJ,GAAIO,QAAQ,mBAAoB,KAAyB,mBAAXC,QAAyB,eAAgB,GAAIC,OAAOC,UAAY,IAGxH,GAAIC,IACDC,SACGC,OAAQf,EAAM,qCAAuC,iCACrDgB,eAAgB,kCAEnBpB,OAAQA,EACRE,KAAMA,EAAOA,KACbI,IAAKD,IAOR,QAJIT,EAAQyB,OAASzB,EAAQ0B,UAAY1B,EAAQ2B,YAC9CN,EAAOC,QAAQM,cAAgB5B,EAAQyB,MAAQ,SAAWzB,EAAQyB,MAAQ,SAAW7B,EAAUI,EAAQ0B,SAAW,IAAM1B,EAAQ2B,WAG5HtC,EAAMgC,GAAQQ,KAAK,SAAUC,GACjCvB,EAAG,KAAMuB,EAASxB,OAAQ,EAAMwB,IAChC,SAAUA,GACc,MAApBA,EAASC,OACVxB,EAAG,KAAMuB,EAASxB,OAAQ,EAAMwB,GAEhCvB,GACGF,KAAMA,EACN2B,QAASF,EACTG,MAAOH,EAASC,YAMxBG,EAAmBnC,EAAOmC,iBAAmB,SAA0B7B,EAAM8B,EAAY5B,GAC1F,GAAI6B,OAEJ,QAAUC,KACPlC,EAAS,MAAOE,EAAM,KAAM,SAAUiC,EAAKC,EAAKC,GAC7C,GAAIF,EACD,MAAO/B,GAAG+B,EAGPC,aAAeE,SAClBF,GAAOA,IAGVH,EAAQM,KAAKC,MAAMP,EAASG,EAE5B,IAAIK,IAAQJ,EAAIlB,QAAQuB,MAAQ,IAAIC,MAAM,KAAKC,OAAO,SAAUF,GAC7D,MAAQ,aAAajC,KAAKiC,KAE1BG,IAAI,SAAUH,GACd,OAAQ,SAASI,KAAKJ,QAAa,KACnCK,OAEEN,GAAQT,EACV5B,EAAG+B,EAAKF,EAASI,IAEjBnC,EAAOuC,EACPP,UAk8BZ,OAz7BAtC,GAAOoD,KAAO,WACX1D,KAAK2D,MAAQ,SAAUpD,EAASO,GACN,kBAAZP,KACRO,EAAKP,EACLA,MAGHA,EAAUA,KAEV,IAAIU,GAAM,cACN2C,IAEJA,GAAOX,KAAK,QAAU1B,mBAAmBhB,EAAQsD,MAAQ,QACzDD,EAAOX,KAAK,QAAU1B,mBAAmBhB,EAAQuD,MAAQ,YACzDF,EAAOX,KAAK,YAAc1B,mBAAmBhB,EAAQwD,UAAY,QAE7DxD,EAAQyD,MACTJ,EAAOX,KAAK,QAAU1B,mBAAmBhB,EAAQyD,OAGpD/C,GAAO,IAAM2C,EAAOK,KAAK,KAEzBxB,EAAiBxB,IAAOV,EAAQyD,KAAMlD,IAMzCd,KAAKkE,KAAO,SAAUpD,GACnBJ,EAAS,MAAO,aAAc,KAAMI,IAMvCd,KAAKmE,MAAQ,SAAUrD,GACpBJ,EAAS,MAAO,SAAU,KAAMI,IAMnCd,KAAKoE,cAAgB,SAAU7D,EAASO,GACd,kBAAZP,KACRO,EAAKP,EACLA,MAGHA,EAAUA,KACV,IAAIU,GAAM,iBACN2C,IAUJ,IARIrD,EAAQ8D,KACTT,EAAOX,KAAK,YAGX1C,EAAQ+D,eACTV,EAAOX,KAAK,sBAGX1C,EAAQgE,MAAO,CAChB,GAAIA,GAAQhE,EAAQgE,KAEhBA,GAAMC,cAAgB9C,OACvB6C,EAAQA,EAAME,eAGjBb,EAAOX,KAAK,SAAW1B,mBAAmBgD,IAG7C,GAAIhE,EAAQmE,OAAQ,CACjB,GAAIA,GAASnE,EAAQmE,MAEjBA,GAAOF,cAAgB9C,OACxBgD,EAASA,EAAOD,eAGnBb,EAAOX,KAAK,UAAY1B,mBAAmBmD,IAG1CnE,EAAQyD,MACTJ,EAAOX,KAAK,QAAU1B,mBAAmBhB,EAAQyD,OAGhDJ,EAAOe,OAAS,IACjB1D,GAAO,IAAM2C,EAAOK,KAAK,MAG5BvD,EAAS,MAAOO,EAAK,KAAMH,IAM9Bd,KAAK4E,KAAO,SAAU3C,EAAUnB,GAC7B,GAAI+D,GAAU5C,EAAW,UAAYA,EAAW,OAEhDvB,GAAS,MAAOmE,EAAS,KAAM/D,IAMlCd,KAAK8E,UAAY,SAAU7C,EAAU1B,EAASO,GACpB,kBAAZP,KACRO,EAAKP,EACLA,KAGH,IAAIU,GAAM,UAAYgB,EAAW,SAC7B2B,IAEJA,GAAOX,KAAK,QAAU1B,mBAAmBhB,EAAQsD,MAAQ,QACzDD,EAAOX,KAAK,QAAU1B,mBAAmBhB,EAAQuD,MAAQ,YACzDF,EAAOX,KAAK,YAAc1B,mBAAmBhB,EAAQwD,UAAY,QAE7DxD,EAAQyD,MACTJ,EAAOX,KAAK,QAAU1B,mBAAmBhB,EAAQyD,OAGpD/C,GAAO,IAAM2C,EAAOK,KAAK,KAEzBxB,EAAiBxB,IAAOV,EAAQyD,KAAMlD,IAMzCd,KAAK+E,YAAc,SAAU9C,EAAUnB,GAEpC,GAAIyB,GAAU,UAAYN,EAAW,gCACrCQ,GAAiBF,GAAS,EAAOzB,IAMpCd,KAAKgF,UAAY,SAAU/C,EAAUnB,GAClCJ,EAAS,MAAO,UAAYuB,EAAW,SAAU,KAAMnB,IAM1Dd,KAAKiF,SAAW,SAAUC,EAASpE,GAEhC,GAAIyB,GAAU,SAAW2C,EAAU,2DACnCzC,GAAiBF,GAAS,EAAOzB,IAMpCd,KAAKmF,OAAS,SAAUlD,EAAUnB,GAC/BJ,EAAS,MAAO,mBAAqBuB,EAAU,KAAMnB,IAMxDd,KAAKoF,SAAW,SAAUnD,EAAUnB,GACjCJ,EAAS,SAAU,mBAAqBuB,EAAU,KAAMnB,IAK3Dd,KAAKqF,WAAa,SAAU9E,EAASO,GAClCJ,EAAS,OAAQ,cAAeH,EAASO,KAO/CR,EAAOgF,WAAa,SAAU/E,GAsB3B,QAASgF,GAAWC,EAAQ1E,GACzB,MAAI0E,KAAWC,EAAYD,QAAUC,EAAYC,IACvC5E,EAAG,KAAM2E,EAAYC,SAG/BC,GAAKC,OAAO,SAAWJ,EAAQ,SAAU3C,EAAK6C,GAC3CD,EAAYD,OAASA,EACrBC,EAAYC,IAAMA,EAClB5E,EAAG+B,EAAK6C,KA7Bd,GAKIG,GALAC,EAAOvF,EAAQwF,KACfC,EAAOzF,EAAQyF,KACfC,EAAW1F,EAAQ0F,SAEnBN,EAAO3F,IAIR6F,GADCI,EACU,UAAYA,EAEZ,UAAYD,EAAO,IAAMF,CAGvC,IAAIL,IACDD,OAAQ,KACRE,IAAK,KAqBR1F,MAAK4F,OAAS,SAAUM,EAAKpF,GAC1BJ,EAAS,MAAOmF,EAAW,aAAeK,EAAK,KAAM,SAAUrD,EAAKC,EAAKC,GACtE,MAAIF,GACM/B,EAAG+B,OAGb/B,GAAG,KAAMgC,EAAIqD,OAAOT,IAAK3C,MAY/B/C,KAAKoG,UAAY,SAAU7F,EAASO,GACjCJ,EAAS,OAAQmF,EAAW,YAAatF,EAASO,IASrDd,KAAKqG,UAAY,SAAUH,EAAKpF,GAC7BJ,EAAS,SAAUmF,EAAW,aAAeK,EAAK3F,EAASO,IAM9Dd,KAAKsG,WAAa,SAAUxF,GACzBJ,EAAS,SAAUmF,EAAUtF,EAASO,IAMzCd,KAAKuG,SAAW,SAAUzF,GACvBJ,EAAS,MAAOmF,EAAW,QAAS,KAAM/E,IAM7Cd,KAAKwG,UAAY,SAAUjG,EAASO,GACjCP,EAAUA,KACV,IAAIU,GAAM4E,EAAW,SACjBjC,IAEmB,iBAAZrD,GAERqD,EAAOX,KAAK,SAAW1C,IAEnBA,EAAQkG,OACT7C,EAAOX,KAAK,SAAW1B,mBAAmBhB,EAAQkG,QAGjDlG,EAAQmG,MACT9C,EAAOX,KAAK,QAAU1B,mBAAmBhB,EAAQmG,OAGhDnG,EAAQoG,MACT/C,EAAOX,KAAK,QAAU1B,mBAAmBhB,EAAQoG,OAGhDpG,EAAQuD,MACTF,EAAOX,KAAK,QAAU1B,mBAAmBhB,EAAQuD,OAGhDvD,EAAQqG,WACThD,EAAOX,KAAK,aAAe1B,mBAAmBhB,EAAQqG,YAGrDrG,EAAQyD,MACTJ,EAAOX,KAAK,QAAU1C,EAAQyD,MAG7BzD,EAAQwD,UACTH,EAAOX,KAAK,YAAc1C,EAAQwD,WAIpCH,EAAOe,OAAS,IACjB1D,GAAO,IAAM2C,EAAOK,KAAK,MAG5BvD,EAAS,MAAOO,EAAK,KAAMH,IAM9Bd,KAAK6G,QAAU,SAAUC,EAAQhG,GAC9BJ,EAAS,MAAOmF,EAAW,UAAYiB,EAAQ,KAAMhG,IAMxDd,KAAK+G,QAAU,SAAUJ,EAAMD,EAAM5F,GAClCJ,EAAS,MAAOmF,EAAW,YAAcc,EAAO,MAAQD,EAAM,KAAM5F,IAMvEd,KAAKgH,aAAe,SAAUlG,GAC3BJ,EAAS,MAAOmF,EAAW,kBAAmB,KAAM,SAAUhD,EAAKoE,EAAOlE,GACvE,MAAIF,GACM/B,EAAG+B,IAGboE,EAAQA,EAAM1D,IAAI,SAAUmD,GACzB,MAAOA,GAAKR,IAAI1E,QAAQ,iBAAkB,UAG7CV,GAAG,KAAMmG,EAAOlE,OAOtB/C,KAAKkH,QAAU,SAAUxB,EAAK5E,GAC3BJ,EAAS,MAAOmF,EAAW,cAAgBH,EAAK,KAAM5E,EAAI,QAM7Dd,KAAKmH,UAAY,SAAU3B,EAAQE,EAAK5E,GACrCJ,EAAS,MAAOmF,EAAW,gBAAkBH,EAAK,KAAM5E,IAM3Dd,KAAKoH,OAAS,SAAU5B,EAAQ5E,EAAME,GACnC,MAAKF,IAAiB,KAATA,MAIbF,GAAS,MAAOmF,EAAW,aAAejF,GAAQ4E,EAAS,QAAUA,EAAS,IAAK,KAAM,SAAU3C,EAAKwE,EAAatE,GAClH,MAAIF,GACM/B,EAAG+B,OAGb/B,GAAG,KAAMuG,EAAY3B,IAAK3C,KARnB4C,EAAKC,OAAO,SAAWJ,EAAQ1E,IAe5Cd,KAAKsH,YAAc,SAAU5B,EAAK5E,GAC/BJ,EAAS,MAAOmF,EAAW,aAAeH,EAAK,KAAM5E,IAMxDd,KAAKuH,QAAU,SAAUC,EAAM1G,GAC5BJ,EAAS,MAAOmF,EAAW,cAAgB2B,EAAM,KAAM,SAAU3E,EAAKC,EAAKC,GACxE,MAAIF,GACM/B,EAAG+B,OAGb/B,GAAG,KAAMgC,EAAI0E,KAAMzE,MAOzB/C,KAAKyH,SAAW,SAAUC,EAAS5G,GAChC,GAAuB,gBAAZ4G,GACRA,GACGA,QAASzH,EAAKI,OAAOqH,GACrBC,SAAU,aAGb,IAAsB,mBAAXC,SAA0BF,YAAmBE,QAErDF,GACGA,QAASA,EAAQG,SAAS,UAC1BF,SAAU,cAET,CAAA,KAAoB,mBAATG,OAAwBJ,YAAmBI,OAM1D,KAAM,IAAIC,OAAM,oFALhBL,IACGA,QAASvH,EAAUuH,GACnBC,SAAU,UAOnBjH,EAAS,OAAQmF,EAAW,aAAc6B,EAAS,SAAU7E,EAAKC,EAAKC,GACpE,MAAIF,GACM/B,EAAG+B,OAGb/B,GAAG,KAAMgC,EAAI4C,IAAK3C,MAOxB/C,KAAKuF,WAAa,SAAUyC,EAAUpH,EAAMqH,EAAMnH,GAC/C,GAAID,IACDqH,UAAWF,EACXR,OACG5G,KAAMA,EACNuH,KAAM,SACNtE,KAAM,OACN6B,IAAKuC,IAIXvH,GAAS,OAAQmF,EAAW,aAAchF,EAAM,SAAUgC,EAAKC,EAAKC,GACjE,MAAIF,GACM/B,EAAG+B,OAGb/B,GAAG,KAAMgC,EAAI4C,IAAK3C,MAQxB/C,KAAKoI,SAAW,SAAUZ,EAAM1G,GAC7BJ,EAAS,OAAQmF,EAAW,cACzB2B,KAAMA,GACN,SAAU3E,EAAKC,EAAKC,GACpB,MAAIF,GACM/B,EAAG+B,OAGb/B,GAAG,KAAMgC,EAAI4C,IAAK3C,MAQxB/C,KAAKqI,OAAS,SAAUC,EAAQd,EAAMe,EAASzH,GAC5C,GAAIkF,GAAO,GAAI1F,GAAOoD,IAEtBsC,GAAKpB,KAAK,KAAM,SAAU/B,EAAK2F,GAC5B,GAAI3F,EACD,MAAO/B,GAAG+B,EAGb,IAAIhC,IACD0H,QAASA,EACTE,QACG1C,KAAMxF,EAAQyF,KACd0C,MAAOF,EAASE,OAEnBC,SAAUL,GACVd,KAAMA,EAGT9G,GAAS,OAAQmF,EAAW,eAAgBhF,EAAM,SAAUgC,EAAKC,EAAKC,GACnE,MAAIF,GACM/B,EAAG+B,IAGb4C,EAAYC,IAAM5C,EAAI4C,QAEtB5E,GAAG,KAAMgC,EAAI4C,IAAK3C,SAQ3B/C,KAAK4I,WAAa,SAAUlC,EAAM2B,EAAQvH,GACvCJ,EAAS,QAASmF,EAAW,mBAAqBa,GAC/ChB,IAAK2C,GACLvH,IAMNd,KAAK4E,KAAO,SAAU9D,GACnBJ,EAAS,MAAOmF,EAAU,KAAM/E,IAMnCd,KAAK6I,aAAe,SAAU/H,EAAIgI,GAC/BA,EAAQA,GAAS,GACjB,IAAInD,GAAO3F,IAEXU,GAAS,MAAOmF,EAAW,sBAAuB,KAAM,SAAUhD,EAAKhC,EAAMkC,GAC1E,MAAIF,GACM/B,EAAG+B,QAGM,MAAfE,EAAIT,OACLyG,WAAW,WACRpD,EAAKkD,aAAa/H,EAAIgI,IACtBA,GAEHhI,EAAG+B,EAAKhC,EAAMkC,OAQvB/C,KAAKgJ,SAAW,SAAU9C,EAAKtF,EAAME,GAClCF,EAAOqI,UAAUrI,GACjBF,EAAS,MAAOmF,EAAW,aAAejF,EAAO,IAAMA,EAAO,KAC3DsF,IAAKA,GACLpF,IAMNd,KAAKkJ,KAAO,SAAUpI,GACnBJ,EAAS,OAAQmF,EAAW,SAAU,KAAM/E,IAM/Cd,KAAKmJ,UAAY,SAAUrI,GACxBJ,EAAS,MAAOmF,EAAW,SAAU,KAAM/E,IAM9Cd,KAAKwF,OAAS,SAAU4D,EAAWC,EAAWvI,GAClB,IAArBwI,UAAU3E,QAAwC,kBAAjB2E,WAAU,KAC5CxI,EAAKuI,EACLA,EAAYD,EACZA,EAAY,UAGfpJ,KAAK4F,OAAO,SAAWwD,EAAW,SAAUvG,EAAKqD,GAC9C,MAAIrD,IAAO/B,EACDA,EAAG+B,OAGb8C,GAAKS,WACFF,IAAK,cAAgBmD,EACrB3D,IAAKQ,GACLpF,MAOTd,KAAKuJ,kBAAoB,SAAUhJ,EAASO,GACzCJ,EAAS,OAAQmF,EAAW,SAAUtF,EAASO,IAMlDd,KAAKwJ,UAAY,SAAU1I,GACxBJ,EAAS,MAAOmF,EAAW,SAAU,KAAM/E,IAM9Cd,KAAKyJ,QAAU,SAAUC,EAAI5I,GAC1BJ,EAAS,MAAOmF,EAAW,UAAY6D,EAAI,KAAM5I,IAMpDd,KAAK2J,WAAa,SAAUpJ,EAASO,GAClCJ,EAAS,OAAQmF,EAAW,SAAUtF,EAASO,IAMlDd,KAAK4J,SAAW,SAAUF,EAAInJ,EAASO,GACpCJ,EAAS,QAASmF,EAAW,UAAY6D,EAAInJ,EAASO,IAMzDd,KAAK6J,WAAa,SAAUH,EAAI5I,GAC7BJ,EAAS,SAAUmF,EAAW,UAAY6D,EAAI,KAAM5I,IAMvDd,KAAK8J,KAAO,SAAUtE,EAAQ5E,EAAME,GACjCJ,EAAS,MAAOmF,EAAW,aAAeoD,UAAUrI,IAAS4E,EAAS,QAAUA,EAAS,IAAK,KAAM1E,GAAI,IAM3Gd,KAAK+J,OAAS,SAAUvE,EAAQ5E,EAAME,GACnC6E,EAAKyB,OAAO5B,EAAQ5E,EAAM,SAAUiC,EAAK6C,GACtC,MAAI7C,GACM/B,EAAG+B,OAGbnC,GAAS,SAAUmF,EAAW,aAAejF,GAC1C2H,QAAS3H,EAAO,cAChB8E,IAAKA,EACLF,OAAQA,GACR1E,MAMTd,KAAAA,UAAcA,KAAK+J,OAKnB/J,KAAKgK,KAAO,SAAUxE,EAAQ5E,EAAMqJ,EAASnJ,GAC1CyE,EAAWC,EAAQ,SAAU3C,EAAKqH,GAC/BvE,EAAK4B,QAAQ2C,EAAe,kBAAmB,SAAUrH,EAAK2E,GAE3DA,EAAK2C,QAAQ,SAAUjE,GAChBA,EAAItF,OAASA,IACdsF,EAAItF,KAAOqJ,GAGG,SAAb/D,EAAIrC,YACEqC,GAAIR,MAIjBC,EAAKyC,SAASZ,EAAM,SAAU3E,EAAKuH,GAChCzE,EAAK0C,OAAO6B,EAAcE,EAAU,WAAaxJ,EAAM,SAAUiC,EAAKwF,GACnE1C,EAAKiD,WAAWpD,EAAQ6C,EAAQvH,YAU/Cd,KAAKqK,MAAQ,SAAU7E,EAAQ5E,EAAM8G,EAASa,EAAShI,EAASO,GACtC,kBAAZP,KACRO,EAAKP,EACLA,MAGHoF,EAAKyB,OAAO5B,EAAQyD,UAAUrI,GAAO,SAAUiC,EAAK6C,GACjD,GAAI4E,IACD/B,QAASA,EACTb,QAAmC,mBAAnBnH,GAAQF,QAA0BE,EAAQF,OAASF,EAAUuH,GAAWA,EACxFlC,OAAQA,EACR+E,UAAWhK,GAAWA,EAAQgK,UAAYhK,EAAQgK,UAAYC,OAC9D/B,OAAQlI,GAAWA,EAAQkI,OAASlI,EAAQkI,OAAS+B,OAIlD3H,IAAqB,MAAdA,EAAIL,QACd8H,EAAa5E,IAAMA,GAGtBhF,EAAS,MAAOmF,EAAW,aAAeoD,UAAUrI,GAAO0J,EAAcxJ,MAY/Ed,KAAKyK,WAAa,SAAUlK,EAASO,GAClCP,EAAUA,KACV,IAAIU,GAAM4E,EAAW,WACjBjC,IAcJ,IAZIrD,EAAQmF,KACT9B,EAAOX,KAAK,OAAS1B,mBAAmBhB,EAAQmF,MAG/CnF,EAAQK,MACTgD,EAAOX,KAAK,QAAU1B,mBAAmBhB,EAAQK,OAGhDL,EAAQkI,QACT7E,EAAOX,KAAK,UAAY1B,mBAAmBhB,EAAQkI,SAGlDlI,EAAQgE,MAAO,CAChB,GAAIA,GAAQhE,EAAQgE,KAEhBA,GAAMC,cAAgB9C,OACvB6C,EAAQA,EAAME,eAGjBb,EAAOX,KAAK,SAAW1B,mBAAmBgD,IAG7C,GAAIhE,EAAQmK,MAAO,CAChB,GAAIA,GAAQnK,EAAQmK,KAEhBA,GAAMlG,cAAgB9C,OACvBgJ,EAAQA,EAAMjG,eAGjBb,EAAOX,KAAK,SAAW1B,mBAAmBmJ,IAGzCnK,EAAQyD,MACTJ,EAAOX,KAAK,QAAU1C,EAAQyD,MAG7BzD,EAAQoK,SACT/G,EAAOX,KAAK,YAAc1C,EAAQoK,SAGjC/G,EAAOe,OAAS,IACjB1D,GAAO,IAAM2C,EAAOK,KAAK,MAG5BvD,EAAS,MAAOO,EAAK,KAAMH,IAM9Bd,KAAK4K,UAAY,SAAUC,EAAOC,EAAYhK,GAC3CJ,EAAS,MAAO,iBAAmBmK,EAAQ,IAAMC,EAAY,KAAMhK,IAMtEd,KAAK+K,KAAO,SAAUF,EAAOC,EAAYhK,GACtCJ,EAAS,MAAO,iBAAmBmK,EAAQ,IAAMC,EAAY,KAAMhK,IAMtEd,KAAKgL,OAAS,SAAUH,EAAOC,EAAYhK,GACxCJ,EAAS,SAAU,iBAAmBmK,EAAQ,IAAMC,EAAY,KAAMhK,IAMzEd,KAAKiL,cAAgB,SAAU1K,EAASO,GACrCJ,EAAS,OAAQmF,EAAW,YAAatF,EAASO,IAMrDd,KAAKkL,YAAc,SAAUxB,EAAInJ,EAASO,GACvCJ,EAAS,QAASmF,EAAW,aAAe6D,EAAInJ,EAASO,IAM5Dd,KAAKmL,WAAa,SAAUzB,EAAI5I,GAC7BJ,EAAS,MAAOmF,EAAW,aAAe6D,EAAI,KAAM5I,IAMvDd,KAAKoL,cAAgB,SAAU1B,EAAI5I,GAChCJ,EAAS,SAAUmF,EAAW,aAAe6D,EAAI,KAAM5I,KAO7DR,EAAO+K,KAAO,SAAU9K,GACrB,GAAImJ,GAAKnJ,EAAQmJ,GACb4B,EAAW,UAAY5B,CAK3B1J,MAAK8J,KAAO,SAAUhJ,GACnBJ,EAAS,MAAO4K,EAAU,KAAMxK,IAenCd,KAAKuL,OAAS,SAAUhL,EAASO,GAC9BJ,EAAS,OAAQ,SAAUH,EAASO,IAMvCd,KAAAA,UAAc,SAAUc,GACrBJ,EAAS,SAAU4K,EAAU,KAAMxK,IAMtCd,KAAKkJ,KAAO,SAAUpI,GACnBJ,EAAS,OAAQ4K,EAAW,QAAS,KAAMxK,IAM9Cd,KAAKwL,OAAS,SAAUjL,EAASO,GAC9BJ,EAAS,QAAS4K,EAAU/K,EAASO,IAMxCd,KAAK+K,KAAO,SAAUjK,GACnBJ,EAAS,MAAO4K,EAAW,QAAS,KAAMxK,IAM7Cd,KAAKgL,OAAS,SAAUlK,GACrBJ,EAAS,SAAU4K,EAAW,QAAS,KAAMxK,IAMhDd,KAAK4K,UAAY,SAAU9J,GACxBJ,EAAS,MAAO4K,EAAW,QAAS,KAAMxK,KAOhDR,EAAOmL,MAAQ,SAAUlL,GACtB,GAAIK,GAAO,UAAYL,EAAQyF,KAAO,IAAMzF,EAAQuF,KAAO,SAE3D9F,MAAKuL,OAAS,SAAUhL,EAASO,GAC9BJ,EAAS,OAAQE,EAAML,EAASO,IAGnCd,KAAK0L,KAAO,SAAUnL,EAASO,GAC5B,GAAI6K,KAEJC,QAAOC,KAAKtL,GAAS4J,QAAQ,SAAU2B,GACpCH,EAAM1I,KAAK1B,mBAAmBuK,GAAU,IAAMvK,mBAAmBhB,EAAQuL,OAG5ErJ,EAAiB7B,EAAO,IAAM+K,EAAM1H,KAAK,OAAQ1D,EAAQyD,KAAMlD,IAGlEd,KAAK+L,QAAU,SAAUC,EAAOD,EAASjL,GACtCJ,EAAS,OAAQsL,EAAMC,cACpBC,KAAMH,GACNjL,IAGNd,KAAKmM,KAAO,SAAUH,EAAOzL,EAASO,GACnCJ,EAAS,QAASE,EAAO,IAAMoL,EAAOzL,EAASO,IAGlDd,KAAKoM,IAAM,SAAUJ,EAAOlL,GACzBJ,EAAS,MAAOE,EAAO,IAAMoL,EAAO,KAAMlL,KAOhDR,EAAO+L,OAAS,SAAU9L,GACvB,GAAIK,GAAO,WACP+K,EAAQ,MAAQpL,EAAQoL,KAE5B3L,MAAKsM,aAAe,SAAU/L,EAASO,GACpCJ,EAAS,MAAOE,EAAO,eAAiB+K,EAAOpL,EAASO,IAG3Dd,KAAKuM,KAAO,SAAUhM,EAASO,GAC5BJ,EAAS,MAAOE,EAAO,OAAS+K,EAAOpL,EAASO,IAGnDd,KAAKwM,OAAS,SAAUjM,EAASO,GAC9BJ,EAAS,MAAOE,EAAO,SAAW+K,EAAOpL,EAASO,IAGrDd,KAAKyM,MAAQ,SAAUlM,EAASO,GAC7BJ,EAAS,MAAOE,EAAO,QAAU+K,EAAOpL,EAASO,KAOvDR,EAAOoM,UAAY,WAChB1M,KAAK2M,aAAe,SAAU7L,GAC3BJ,EAAS,MAAO,cAAe,KAAMI,KAIpCR,EAriCV,GAAIc,GAA4B,kBAAXwL,SAAoD,gBAApBA,QAAOC,SAAwB,SAAUC,GAC3F,aAAcA,IACb,SAAUA,GACX,MAAOA,IAAyB,kBAAXF,SAAyBE,EAAItI,cAAgBoI,OAAS,eAAkBE,GAO5FhN,GAAQiN,UACTjN,EAAQiN,WAgiCXzM,EAAO0M,UAAY,SAAUhH,EAAMF,GAChC,MAAO,IAAIxF,GAAOmL,OACfzF,KAAMA,EACNF,KAAMA,KAIZxF,EAAO2M,QAAU,SAAUjH,EAAMF,GAC9B,MAAKA,GAKK,GAAIxF,GAAOgF,YACfU,KAAMA,EACND,KAAMD,IANF,GAAIxF,GAAOgF,YACfW,SAAUD,KAUnB1F,EAAO4M,QAAU,WACd,MAAO,IAAI5M,GAAOoD,MAGrBpD,EAAO6M,QAAU,SAAUzD,GACxB,MAAO,IAAIpJ,GAAO+K,MACf3B,GAAIA,KAIVpJ,EAAO8M,UAAY,SAAUzB,GAC1B,MAAO,IAAIrL,GAAO+L,QACfV,MAAOA,KAIbrL,EAAOqM,aAAe,WACnB,MAAO,IAAIrM,GAAOoM,WAGrBlN,EAAOD,QAAUe","file":"github.min.js","sourcesContent":["(function (global, factory) {\n   if (typeof define === \"function\" && define.amd) {\n      define(['module', 'utf8', 'axios', 'base-64', 'es6-promise'], factory);\n   } else if (typeof exports !== \"undefined\") {\n      factory(module, require('utf8'), require('axios'), require('base-64'), require('es6-promise'));\n   } else {\n      var mod = {\n         exports: {}\n      };\n      factory(mod, global.utf8, global.axios, global.base64, global.Promise);\n      global.github = mod.exports;\n   }\n})(this, function (module, Utf8, axios, Base64, Promise) {\n   /*!\n    * @overview  Github.js\n    *\n    * @copyright (c) 2013 Michael Aufreiter, Development Seed\n    *            Github.js is freely distributable.\n    *\n    * @license   Licensed under BSD-3-Clause-Clear\n    *\n    *            For all details and documentation:\n    *            http://substance.io/michael/github\n    */\n   'use strict';\n\n   var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n      return typeof obj;\n   } : function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n   };\n\n   function b64encode(string) {\n      return Base64.encode(Utf8.encode(string));\n   }\n\n   if (Promise.polyfill) {\n      Promise.polyfill();\n   }\n\n   // Initial Setup\n   // -------------\n\n   function Github(options) {\n      options = options || {};\n\n      var API_URL = options.apiUrl || 'https://api.github.com';\n\n      // HTTP Request Abstraction\n      // =======\n      //\n      // I'm not proud of this and neither should you be if you were responsible for the XMLHttpRequest spec.\n\n      var _request = Github._request = function _request(method, path, data, cb, raw) {\n         function getURL() {\n            var url = path.indexOf('//') >= 0 ? path : API_URL + path;\n\n            url += /\\?/.test(url) ? '&' : '?';\n\n            if (data && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && ['GET', 'HEAD', 'DELETE'].indexOf(method) > -1) {\n               for (var param in data) {\n                  if (data.hasOwnProperty(param)) {\n                     url += '&' + encodeURIComponent(param) + '=' + encodeURIComponent(data[param]);\n                  }\n               }\n            }\n\n            return url.replace(/(&timestamp=\\d+)/, '') + (typeof window !== 'undefined' ? '&timestamp=' + new Date().getTime() : '');\n         }\n\n         var config = {\n            headers: {\n               Accept: raw ? 'application/vnd.github.v3.raw+json' : 'application/vnd.github.v3+json',\n               'Content-Type': 'application/json;charset=UTF-8'\n            },\n            method: method,\n            data: data ? data : {},\n            url: getURL()\n         };\n\n         if (options.token || options.username && options.password) {\n            config.headers.Authorization = options.token ? 'token ' + options.token : 'Basic ' + b64encode(options.username + ':' + options.password);\n         }\n\n         return axios(config).then(function (response) {\n            cb(null, response.data || true, response);\n         }, function (response) {\n            if (response.status === 304) {\n               cb(null, response.data || true, response);\n            } else {\n               cb({\n                  path: path,\n                  request: response,\n                  error: response.status\n               });\n            }\n         });\n      };\n\n      var _requestAllPages = Github._requestAllPages = function _requestAllPages(path, singlePage, cb) {\n         var results = [];\n\n         (function iterate() {\n            _request('GET', path, null, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               if (!(res instanceof Array)) {\n                  res = [res];\n               }\n\n               results.push.apply(results, res);\n\n               var next = (xhr.headers.link || '').split(',').filter(function (link) {\n                  return (/rel=\"next\"/.test(link)\n                  );\n               }).map(function (link) {\n                  return (/<(.*)>/.exec(link) || [])[1];\n               }).pop();\n\n               if (!next || singlePage) {\n                  cb(err, results, xhr);\n               } else {\n                  path = next;\n                  iterate();\n               }\n            });\n         })();\n      };\n\n      // User API\n      // =======\n\n      Github.User = function () {\n         this.repos = function (options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            options = options || {};\n\n            var url = '/user/repos';\n            var params = [];\n\n            params.push('type=' + encodeURIComponent(options.type || 'all'));\n            params.push('sort=' + encodeURIComponent(options.sort || 'updated'));\n            params.push('per_page=' + encodeURIComponent(options.per_page || '100')); // jscs:ignore\n\n            if (options.page) {\n               params.push('page=' + encodeURIComponent(options.page));\n            }\n\n            url += '?' + params.join('&');\n\n            _requestAllPages(url, !!options.page, cb);\n         };\n\n         // List user organizations\n         // -------\n\n         this.orgs = function (cb) {\n            _request('GET', '/user/orgs', null, cb);\n         };\n\n         // List authenticated user's gists\n         // -------\n\n         this.gists = function (cb) {\n            _request('GET', '/gists', null, cb);\n         };\n\n         // List authenticated user's unread notifications\n         // -------\n\n         this.notifications = function (options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            options = options || {};\n            var url = '/notifications';\n            var params = [];\n\n            if (options.all) {\n               params.push('all=true');\n            }\n\n            if (options.participating) {\n               params.push('participating=true');\n            }\n\n            if (options.since) {\n               var since = options.since;\n\n               if (since.constructor === Date) {\n                  since = since.toISOString();\n               }\n\n               params.push('since=' + encodeURIComponent(since));\n            }\n\n            if (options.before) {\n               var before = options.before;\n\n               if (before.constructor === Date) {\n                  before = before.toISOString();\n               }\n\n               params.push('before=' + encodeURIComponent(before));\n            }\n\n            if (options.page) {\n               params.push('page=' + encodeURIComponent(options.page));\n            }\n\n            if (params.length > 0) {\n               url += '?' + params.join('&');\n            }\n\n            _request('GET', url, null, cb);\n         };\n\n         // Show user information\n         // -------\n\n         this.show = function (username, cb) {\n            var command = username ? '/users/' + username : '/user';\n\n            _request('GET', command, null, cb);\n         };\n\n         // List user repositories\n         // -------\n\n         this.userRepos = function (username, options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            var url = '/users/' + username + '/repos';\n            var params = [];\n\n            params.push('type=' + encodeURIComponent(options.type || 'all'));\n            params.push('sort=' + encodeURIComponent(options.sort || 'updated'));\n            params.push('per_page=' + encodeURIComponent(options.per_page || '100')); // jscs:ignore\n\n            if (options.page) {\n               params.push('page=' + encodeURIComponent(options.page));\n            }\n\n            url += '?' + params.join('&');\n\n            _requestAllPages(url, !!options.page, cb);\n         };\n\n         // List user starred repositories\n         // -------\n\n         this.userStarred = function (username, cb) {\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\n            var request = '/users/' + username + '/starred?type=all&per_page=100';\n            _requestAllPages(request, false, cb);\n         };\n\n         // List a user's gists\n         // -------\n\n         this.userGists = function (username, cb) {\n            _request('GET', '/users/' + username + '/gists', null, cb);\n         };\n\n         // List organization repositories\n         // -------\n\n         this.orgRepos = function (orgname, cb) {\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\n            var request = '/orgs/' + orgname + '/repos?type=all&&page_num=100&sort=updated&direction=desc';\n            _requestAllPages(request, false, cb);\n         };\n\n         // Follow user\n         // -------\n\n         this.follow = function (username, cb) {\n            _request('PUT', '/user/following/' + username, null, cb);\n         };\n\n         // Unfollow user\n         // -------\n\n         this.unfollow = function (username, cb) {\n            _request('DELETE', '/user/following/' + username, null, cb);\n         };\n\n         // Create a repo\n         // -------\n         this.createRepo = function (options, cb) {\n            _request('POST', '/user/repos', options, cb);\n         };\n      };\n\n      // Repository API\n      // =======\n\n      Github.Repository = function (options) {\n         var repo = options.name;\n         var user = options.user;\n         var fullname = options.fullname;\n\n         var that = this;\n         var repoPath;\n\n         if (fullname) {\n            repoPath = '/repos/' + fullname;\n         } else {\n            repoPath = '/repos/' + user + '/' + repo;\n         }\n\n         var currentTree = {\n            branch: null,\n            sha: null\n         };\n\n         // Uses the cache if branch has not been changed\n         // -------\n\n         function updateTree(branch, cb) {\n            if (branch === currentTree.branch && currentTree.sha) {\n               return cb(null, currentTree.sha);\n            }\n\n            that.getRef('heads/' + branch, function (err, sha) {\n               currentTree.branch = branch;\n               currentTree.sha = sha;\n               cb(err, sha);\n            });\n         }\n\n         // Get a particular reference\n         // -------\n\n         this.getRef = function (ref, cb) {\n            _request('GET', repoPath + '/git/refs/' + ref, null, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.object.sha, xhr);\n            });\n         };\n\n         // Create a new reference\n         // --------\n         //\n         // {\n         //   \"ref\": \"refs/heads/my-new-branch-name\",\n         //   \"sha\": \"827efc6d56897b048c772eb4087f854f46256132\"\n         // }\n\n         this.createRef = function (options, cb) {\n            _request('POST', repoPath + '/git/refs', options, cb);\n         };\n\n         // Delete a reference\n         // --------\n         //\n         // Repo.deleteRef('heads/gh-pages')\n         // repo.deleteRef('tags/v1.0')\n\n         this.deleteRef = function (ref, cb) {\n            _request('DELETE', repoPath + '/git/refs/' + ref, options, cb);\n         };\n\n         // Delete a repo\n         // --------\n\n         this.deleteRepo = function (cb) {\n            _request('DELETE', repoPath, options, cb);\n         };\n\n         // List all tags of a repository\n         // -------\n\n         this.listTags = function (cb) {\n            _request('GET', repoPath + '/tags', null, cb);\n         };\n\n         // List all pull requests of a respository\n         // -------\n\n         this.listPulls = function (options, cb) {\n            options = options || {};\n            var url = repoPath + '/pulls';\n            var params = [];\n\n            if (typeof options === 'string') {\n               // Backward compatibility\n               params.push('state=' + options);\n            } else {\n               if (options.state) {\n                  params.push('state=' + encodeURIComponent(options.state));\n               }\n\n               if (options.head) {\n                  params.push('head=' + encodeURIComponent(options.head));\n               }\n\n               if (options.base) {\n                  params.push('base=' + encodeURIComponent(options.base));\n               }\n\n               if (options.sort) {\n                  params.push('sort=' + encodeURIComponent(options.sort));\n               }\n\n               if (options.direction) {\n                  params.push('direction=' + encodeURIComponent(options.direction));\n               }\n\n               if (options.page) {\n                  params.push('page=' + options.page);\n               }\n\n               if (options.per_page) {\n                  params.push('per_page=' + options.per_page);\n               }\n            }\n\n            if (params.length > 0) {\n               url += '?' + params.join('&');\n            }\n\n            _request('GET', url, null, cb);\n         };\n\n         // Gets details for a specific pull request\n         // -------\n\n         this.getPull = function (number, cb) {\n            _request('GET', repoPath + '/pulls/' + number, null, cb);\n         };\n\n         // Retrieve the changes made between base and head\n         // -------\n\n         this.compare = function (base, head, cb) {\n            _request('GET', repoPath + '/compare/' + base + '...' + head, null, cb);\n         };\n\n         // List all branches of a repository\n         // -------\n\n         this.listBranches = function (cb) {\n            _request('GET', repoPath + '/git/refs/heads', null, function (err, heads, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               heads = heads.map(function (head) {\n                  return head.ref.replace(/^refs\\/heads\\//, '');\n               });\n\n               cb(null, heads, xhr);\n            });\n         };\n\n         // Retrieve the contents of a blob\n         // -------\n\n         this.getBlob = function (sha, cb) {\n            _request('GET', repoPath + '/git/blobs/' + sha, null, cb, 'raw');\n         };\n\n         // For a given file path, get the corresponding sha (blob for files, tree for dirs)\n         // -------\n\n         this.getCommit = function (branch, sha, cb) {\n            _request('GET', repoPath + '/git/commits/' + sha, null, cb);\n         };\n\n         // For a given file path, get the corresponding sha (blob for files, tree for dirs)\n         // -------\n\n         this.getSha = function (branch, path, cb) {\n            if (!path || path === '') {\n               return that.getRef('heads/' + branch, cb);\n            }\n\n            _request('GET', repoPath + '/contents/' + path + (branch ? '?ref=' + branch : ''), null, function (err, pathContent, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, pathContent.sha, xhr);\n            });\n         };\n\n         // Get the statuses for a particular SHA\n         // -------\n\n         this.getStatuses = function (sha, cb) {\n            _request('GET', repoPath + '/statuses/' + sha, null, cb);\n         };\n\n         // Retrieve the tree a commit points to\n         // -------\n\n         this.getTree = function (tree, cb) {\n            _request('GET', repoPath + '/git/trees/' + tree, null, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.tree, xhr);\n            });\n         };\n\n         // Post a new blob object, getting a blob SHA back\n         // -------\n\n         this.postBlob = function (content, cb) {\n            if (typeof content === 'string') {\n               content = {\n                  content: Utf8.encode(content),\n                  encoding: 'utf-8'\n               };\n            } else {\n               if (typeof Buffer !== 'undefined' && content instanceof Buffer) {\n                  // in NodeJS\n                  content = {\n                     content: content.toString('base64'),\n                     encoding: 'base64'\n                  };\n               } else if (typeof Blob !== 'undefined' && content instanceof Blob) {\n                  content = {\n                     content: b64encode(content),\n                     encoding: 'base64'\n                  };\n               } else {\n                  throw new Error('Unknown content passed to postBlob. Must be string or Buffer (node) or Blob (web)');\n               }\n            }\n\n            _request('POST', repoPath + '/git/blobs', content, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.sha, xhr);\n            });\n         };\n\n         // Update an existing tree adding a new blob object getting a tree SHA back\n         // -------\n\n         this.updateTree = function (baseTree, path, blob, cb) {\n            var data = {\n               base_tree: baseTree,\n               tree: [{\n                  path: path,\n                  mode: '100644',\n                  type: 'blob',\n                  sha: blob\n               }]\n            };\n\n            _request('POST', repoPath + '/git/trees', data, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.sha, xhr);\n            });\n         };\n\n         // Post a new tree object having a file path pointer replaced\n         // with a new blob SHA getting a tree SHA back\n         // -------\n\n         this.postTree = function (tree, cb) {\n            _request('POST', repoPath + '/git/trees', {\n               tree: tree\n            }, function (err, res, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               cb(null, res.sha, xhr);\n            });\n         };\n\n         // Create a new commit object with the current commit SHA as the parent\n         // and the new tree SHA, getting a commit SHA back\n         // -------\n\n         this.commit = function (parent, tree, message, cb) {\n            var user = new Github.User();\n\n            user.show(null, function (err, userData) {\n               if (err) {\n                  return cb(err);\n               }\n\n               var data = {\n                  message: message,\n                  author: {\n                     name: options.user,\n                     email: userData.email\n                  },\n                  parents: [parent],\n                  tree: tree\n               };\n\n               _request('POST', repoPath + '/git/commits', data, function (err, res, xhr) {\n                  if (err) {\n                     return cb(err);\n                  }\n\n                  currentTree.sha = res.sha; // Update latest commit\n\n                  cb(null, res.sha, xhr);\n               });\n            });\n         };\n\n         // Update the reference of your head to point to the new commit SHA\n         // -------\n\n         this.updateHead = function (head, commit, cb) {\n            _request('PATCH', repoPath + '/git/refs/heads/' + head, {\n               sha: commit\n            }, cb);\n         };\n\n         // Show repository information\n         // -------\n\n         this.show = function (cb) {\n            _request('GET', repoPath, null, cb);\n         };\n\n         // Show repository contributors\n         // -------\n\n         this.contributors = function (cb, retry) {\n            retry = retry || 1000;\n            var that = this;\n\n            _request('GET', repoPath + '/stats/contributors', null, function (err, data, xhr) {\n               if (err) {\n                  return cb(err);\n               }\n\n               if (xhr.status === 202) {\n                  setTimeout(function () {\n                     that.contributors(cb, retry);\n                  }, retry);\n               } else {\n                  cb(err, data, xhr);\n               }\n            });\n         };\n\n         // Get contents\n         // --------\n\n         this.contents = function (ref, path, cb) {\n            path = encodeURI(path);\n            _request('GET', repoPath + '/contents' + (path ? '/' + path : ''), {\n               ref: ref\n            }, cb);\n         };\n\n         // Fork repository\n         // -------\n\n         this.fork = function (cb) {\n            _request('POST', repoPath + '/forks', null, cb);\n         };\n\n         // List forks\n         // --------\n\n         this.listForks = function (cb) {\n            _request('GET', repoPath + '/forks', null, cb);\n         };\n\n         // Branch repository\n         // --------\n\n         this.branch = function (oldBranch, newBranch, cb) {\n            if (arguments.length === 2 && typeof arguments[1] === 'function') {\n               cb = newBranch;\n               newBranch = oldBranch;\n               oldBranch = 'master';\n            }\n\n            this.getRef('heads/' + oldBranch, function (err, ref) {\n               if (err && cb) {\n                  return cb(err);\n               }\n\n               that.createRef({\n                  ref: 'refs/heads/' + newBranch,\n                  sha: ref\n               }, cb);\n            });\n         };\n\n         // Create pull request\n         // --------\n\n         this.createPullRequest = function (options, cb) {\n            _request('POST', repoPath + '/pulls', options, cb);\n         };\n\n         // List hooks\n         // --------\n\n         this.listHooks = function (cb) {\n            _request('GET', repoPath + '/hooks', null, cb);\n         };\n\n         // Get a hook\n         // --------\n\n         this.getHook = function (id, cb) {\n            _request('GET', repoPath + '/hooks/' + id, null, cb);\n         };\n\n         // Create a hook\n         // --------\n\n         this.createHook = function (options, cb) {\n            _request('POST', repoPath + '/hooks', options, cb);\n         };\n\n         // Edit a hook\n         // --------\n\n         this.editHook = function (id, options, cb) {\n            _request('PATCH', repoPath + '/hooks/' + id, options, cb);\n         };\n\n         // Delete a hook\n         // --------\n\n         this.deleteHook = function (id, cb) {\n            _request('DELETE', repoPath + '/hooks/' + id, null, cb);\n         };\n\n         // Read file at given path\n         // -------\n\n         this.read = function (branch, path, cb) {\n            _request('GET', repoPath + '/contents/' + encodeURI(path) + (branch ? '?ref=' + branch : ''), null, cb, true);\n         };\n\n         // Remove a file\n         // -------\n\n         this.remove = function (branch, path, cb) {\n            that.getSha(branch, path, function (err, sha) {\n               if (err) {\n                  return cb(err);\n               }\n\n               _request('DELETE', repoPath + '/contents/' + path, {\n                  message: path + ' is removed',\n                  sha: sha,\n                  branch: branch\n               }, cb);\n            });\n         };\n\n         // Alias for repo.remove for backwards comapt.\n         // -------\n         this.delete = this.remove;\n\n         // Move a file to a new location\n         // -------\n\n         this.move = function (branch, path, newPath, cb) {\n            updateTree(branch, function (err, latestCommit) {\n               that.getTree(latestCommit + '?recursive=true', function (err, tree) {\n                  // Update Tree\n                  tree.forEach(function (ref) {\n                     if (ref.path === path) {\n                        ref.path = newPath;\n                     }\n\n                     if (ref.type === 'tree') {\n                        delete ref.sha;\n                     }\n                  });\n\n                  that.postTree(tree, function (err, rootTree) {\n                     that.commit(latestCommit, rootTree, 'Deleted ' + path, function (err, commit) {\n                        that.updateHead(branch, commit, cb);\n                     });\n                  });\n               });\n            });\n         };\n\n         // Write file contents to a given branch and path\n         // -------\n\n         this.write = function (branch, path, content, message, options, cb) {\n            if (typeof options === 'function') {\n               cb = options;\n               options = {};\n            }\n\n            that.getSha(branch, encodeURI(path), function (err, sha) {\n               var writeOptions = {\n                  message: message,\n                  content: typeof options.encode === 'undefined' || options.encode ? b64encode(content) : content,\n                  branch: branch,\n                  committer: options && options.committer ? options.committer : undefined,\n                  author: options && options.author ? options.author : undefined\n               };\n\n               // If no error, we set the sha to overwrite an existing file\n               if (!(err && err.error !== 404)) {\n                  writeOptions.sha = sha;\n               }\n\n               _request('PUT', repoPath + '/contents/' + encodeURI(path), writeOptions, cb);\n            });\n         };\n\n         // List commits on a repository. Takes an object of optional parameters:\n         // sha: SHA or branch to start listing commits from\n         // path: Only commits containing this file path will be returned\n         // author: Only commits by this author will be returned. Its value can be the GitHub login or the email address\n         // since: ISO 8601 date - only commits after this date will be returned\n         // until: ISO 8601 date - only commits before this date will be returned\n         // -------\n\n         this.getCommits = function (options, cb) {\n            options = options || {};\n            var url = repoPath + '/commits';\n            var params = [];\n\n            if (options.sha) {\n               params.push('sha=' + encodeURIComponent(options.sha));\n            }\n\n            if (options.path) {\n               params.push('path=' + encodeURIComponent(options.path));\n            }\n\n            if (options.author) {\n               params.push('author=' + encodeURIComponent(options.author));\n            }\n\n            if (options.since) {\n               var since = options.since;\n\n               if (since.constructor === Date) {\n                  since = since.toISOString();\n               }\n\n               params.push('since=' + encodeURIComponent(since));\n            }\n\n            if (options.until) {\n               var until = options.until;\n\n               if (until.constructor === Date) {\n                  until = until.toISOString();\n               }\n\n               params.push('until=' + encodeURIComponent(until));\n            }\n\n            if (options.page) {\n               params.push('page=' + options.page);\n            }\n\n            if (options.perpage) {\n               params.push('per_page=' + options.perpage);\n            }\n\n            if (params.length > 0) {\n               url += '?' + params.join('&');\n            }\n\n            _request('GET', url, null, cb);\n         };\n\n         // Check if a repository is starred.\n         // --------\n\n         this.isStarred = function (owner, repository, cb) {\n            _request('GET', '/user/starred/' + owner + '/' + repository, null, cb);\n         };\n\n         // Star a repository.\n         // --------\n\n         this.star = function (owner, repository, cb) {\n            _request('PUT', '/user/starred/' + owner + '/' + repository, null, cb);\n         };\n\n         // Unstar a repository.\n         // --------\n\n         this.unstar = function (owner, repository, cb) {\n            _request('DELETE', '/user/starred/' + owner + '/' + repository, null, cb);\n         };\n\n         // Create a new release\n         // --------\n\n         this.createRelease = function (options, cb) {\n            _request('POST', repoPath + '/releases', options, cb);\n         };\n\n         // Edit a release\n         // --------\n\n         this.editRelease = function (id, options, cb) {\n            _request('PATCH', repoPath + '/releases/' + id, options, cb);\n         };\n\n         // Get a single release\n         // --------\n\n         this.getRelease = function (id, cb) {\n            _request('GET', repoPath + '/releases/' + id, null, cb);\n         };\n\n         // Remove a release\n         // --------\n\n         this.deleteRelease = function (id, cb) {\n            _request('DELETE', repoPath + '/releases/' + id, null, cb);\n         };\n      };\n\n      // Gists API\n      // =======\n\n      Github.Gist = function (options) {\n         var id = options.id;\n         var gistPath = '/gists/' + id;\n\n         // Read the gist\n         // --------\n\n         this.read = function (cb) {\n            _request('GET', gistPath, null, cb);\n         };\n\n         // Create the gist\n         // --------\n         // {\n         //  \"description\": \"the description for this gist\",\n         //    \"public\": true,\n         //    \"files\": {\n         //      \"file1.txt\": {\n         //        \"content\": \"String file contents\"\n         //      }\n         //    }\n         // }\n\n         this.create = function (options, cb) {\n            _request('POST', '/gists', options, cb);\n         };\n\n         // Delete the gist\n         // --------\n\n         this.delete = function (cb) {\n            _request('DELETE', gistPath, null, cb);\n         };\n\n         // Fork a gist\n         // --------\n\n         this.fork = function (cb) {\n            _request('POST', gistPath + '/fork', null, cb);\n         };\n\n         // Update a gist with the new stuff\n         // --------\n\n         this.update = function (options, cb) {\n            _request('PATCH', gistPath, options, cb);\n         };\n\n         // Star a gist\n         // --------\n\n         this.star = function (cb) {\n            _request('PUT', gistPath + '/star', null, cb);\n         };\n\n         // Untar a gist\n         // --------\n\n         this.unstar = function (cb) {\n            _request('DELETE', gistPath + '/star', null, cb);\n         };\n\n         // Check if a gist is starred\n         // --------\n\n         this.isStarred = function (cb) {\n            _request('GET', gistPath + '/star', null, cb);\n         };\n      };\n\n      // Issues API\n      // ==========\n\n      Github.Issue = function (options) {\n         var path = '/repos/' + options.user + '/' + options.repo + '/issues';\n\n         this.create = function (options, cb) {\n            _request('POST', path, options, cb);\n         };\n\n         this.list = function (options, cb) {\n            var query = [];\n\n            Object.keys(options).forEach(function (option) {\n               query.push(encodeURIComponent(option) + '=' + encodeURIComponent(options[option]));\n            });\n\n            _requestAllPages(path + '?' + query.join('&'), !!options.page, cb);\n         };\n\n         this.comment = function (issue, comment, cb) {\n            _request('POST', issue.comments_url, {\n               body: comment\n            }, cb);\n         };\n\n         this.edit = function (issue, options, cb) {\n            _request('PATCH', path + '/' + issue, options, cb);\n         };\n\n         this.get = function (issue, cb) {\n            _request('GET', path + '/' + issue, null, cb);\n         };\n      };\n\n      // Search API\n      // ==========\n\n      Github.Search = function (options) {\n         var path = '/search/';\n         var query = '?q=' + options.query;\n\n         this.repositories = function (options, cb) {\n            _request('GET', path + 'repositories' + query, options, cb);\n         };\n\n         this.code = function (options, cb) {\n            _request('GET', path + 'code' + query, options, cb);\n         };\n\n         this.issues = function (options, cb) {\n            _request('GET', path + 'issues' + query, options, cb);\n         };\n\n         this.users = function (options, cb) {\n            _request('GET', path + 'users' + query, options, cb);\n         };\n      };\n\n      // Rate Limit API\n      // ==========\n\n      Github.RateLimit = function () {\n         this.getRateLimit = function (cb) {\n            _request('GET', '/rate_limit', null, cb);\n         };\n      };\n\n      return Github;\n   };\n\n   // Top Level API\n   // -------\n\n   Github.getIssues = function (user, repo) {\n      return new Github.Issue({\n         user: user,\n         repo: repo\n      });\n   };\n\n   Github.getRepo = function (user, repo) {\n      if (!repo) {\n         return new Github.Repository({\n            fullname: user\n         });\n      } else {\n         return new Github.Repository({\n            user: user,\n            name: repo\n         });\n      }\n   };\n\n   Github.getUser = function () {\n      return new Github.User();\n   };\n\n   Github.getGist = function (id) {\n      return new Github.Gist({\n         id: id\n      });\n   };\n\n   Github.getSearch = function (query) {\n      return new Github.Search({\n         query: query\n      });\n   };\n\n   Github.getRateLimit = function () {\n      return new Github.RateLimit();\n   };\n\n   module.exports = Github;\n});"],"sourceRoot":"/source/"}